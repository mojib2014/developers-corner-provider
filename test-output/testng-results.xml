<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="8" passed="7" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-01-26T10:43:12 CST" name="Default suite" finished-at="2023-01-26T10:43:15 CST" duration-ms="3633">
    <groups>
    </groups>
    <test started-at="2023-01-26T10:43:12 CST" name="Default test" finished-at="2023-01-26T10:43:15 CST" duration-ms="3633">
      <class name="com.developerscorner.provider.service.UserServiceTest">
        <test-method is-config="true" signature="springTestContextBeforeTestClass()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:12 CST" name="springTestContextBeforeTestClass" finished-at="2023-01-26T10:43:12 CST" duration-ms="30" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method is-config="true" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:12 CST" name="springTestContextPrepareTestInstance" finished-at="2023-01-26T10:43:15 CST" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" duration-ms="3397" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="setup" finished-at="2023-01-26T10:43:15 CST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldDeleteAUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method signature="shouldDeleteAUser()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldDeleteAUser" finished-at="2023-01-26T10:43:15 CST" duration-ms="56" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteAUser -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldDeleteAUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldFindAllUsers()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method signature="shouldFindAllUsers()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldFindAllUsers" finished-at="2023-01-26T10:43:15 CST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFindAllUsers -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldFindAllUsers()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldFindUserByEmail()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method signature="shouldFindUserByEmail()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldFindUserByEmail" finished-at="2023-01-26T10:43:15 CST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFindUserByEmail -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldFindUserByEmail()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldFindUserById()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method signature="shouldFindUserById()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldFindUserById" finished-at="2023-01-26T10:43:15 CST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFindUserById -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldFindUserById()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldSaveAUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method signature="shouldSaveAUser()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldSaveAUser" finished-at="2023-01-26T10:43:15 CST" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveAUser -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldSaveAUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldThrowNotFoundExceptionIfUserByEmailNotExists()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method signature="shouldThrowNotFoundExceptionIfUserByEmailNotExists()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldThrowNotFoundExceptionIfUserByEmailNotExists" finished-at="2023-01-26T10:43:15 CST" duration-ms="3" status="FAIL">
          <exception class="org.testng.TestException">
            <message>
              <![CDATA[
Method UserServiceTest.shouldThrowNotFoundExceptionIfUserByEmailNotExists()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a] should have thrown an exception of type class com.developerscorner.provider.exception.NotFoundException]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestException: 
Method UserServiceTest.shouldThrowNotFoundExceptionIfUserByEmailNotExists()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a] should have thrown an exception of type class com.developerscorner.provider.exception.NotFoundException
at org.testng.internal.ExpectedExceptionsHolder.noException(ExpectedExceptionsHolder.java:82)
at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:749)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:634)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowNotFoundExceptionIfUserByEmailNotExists -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldThrowNotFoundExceptionIfUserByEmailNotExists()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldThrowNotFoundExceptionIfUserByIdNotExists()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method signature="shouldThrowNotFoundExceptionIfUserByIdNotExists()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldThrowNotFoundExceptionIfUserByIdNotExists" finished-at="2023-01-26T10:43:15 CST" duration-ms="2" status="PASS">
          <exception class="com.developerscorner.provider.exception.NotFoundException">
            <message>
              <![CDATA[User not found]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.developerscorner.provider.exception.NotFoundException: User not found
at com.developerscorner.provider.service.UserServiceImple.lambda$0(UserServiceImple.java:31)
at java.base/java.util.Optional.orElseThrow(Optional.java:403)
at com.developerscorner.provider.service.UserServiceImple.findById(UserServiceImple.java:31)
at com.developerscorner.provider.service.UserServiceTest.shouldThrowNotFoundExceptionIfUserByIdNotExists(UserServiceTest.java:147)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:239)
at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:186)
at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:253)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:594)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- com.developerscorner.provider.exception.NotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowNotFoundExceptionIfUserByIdNotExists -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldThrowNotFoundExceptionIfUserByIdNotExists()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method signature="shouldUpdateAUser()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="shouldUpdateAUser" finished-at="2023-01-26T10:43:15 CST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUpdateAUser -->
        <test-method is-config="true" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextBeforeTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldUpdateAUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method is-config="true" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestMethod" finished-at="2023-01-26T10:43:15 CST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.developerscorner.provider.service.UserServiceTest.shouldUpdateAUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method is-config="true" signature="springTestContextAfterTestClass()[pri:0, instance:com.developerscorner.provider.service.UserServiceTest@161aa04a]" started-at="2023-01-26T10:43:15 CST" name="springTestContextAfterTestClass" finished-at="2023-01-26T10:43:15 CST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.developerscorner.provider.service.UserServiceTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
